rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    

    function isAuthenticated(){
      return request.auth != null;
    }

    function isUser(uid){
      return request.auth != null && request.auth.uid == uid;
    }

    function orgMember(orgId){
      return isAuthenticated() && ((request.auth.token.organizationKey != null && request.auth.token.organizationKey.orgId == orgId) || request.auth.uid == orgId);
    }

    function locMember(locId){
      return isAuthenticated() && request.auth.token.organizationKey.locId == locId;
    }

    function isOwner(orgId){
      return isAuthenticated() && orgId == request.auth.uid;
    }

    function isOwnerOrSupervisor(locId){
      return locMember(locId) && request.auth.token.organizationKey.role <= 1;
    }

    function isGM(locId){
      return locMember(locId) && request.auth.token.organizationKey.role == 2;
    }

    function isManager(locId){
      return locMember(locId) && request.auth.token.organizationKey.role == 3;
    }


    match /Users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      match /subscription/subscriptionDetails {
          allow read: if isUser(userId);
      }
    }

    match /Products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

  

    function updateLocation(locationId){
      let updatingInfo = request.resource.data.diff(resource.data).affectedKeys().hasAny(["organizationId","subItemId","limits","storageUsed","subscriptionStatus","supervisors","members"]) == false
                         && isOwner(resource.data.organizationId);  
      let updatingSupervisors = isOwner(resource.data.organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["supervisors"]);
      let joiningLocation = request.resource.data.diff(resource.data).affectedKeys().hasOnly(["members"]) && isOwnerOrSupervisor(locationId);
      let updatingSettings = request.resource.data.diff(resource.data).affectedKeys().hasOnly(["settings","schedule","positions"]) && (isOwnerOrSupervisor(locationId) || isGM(locationId));
      return updatingInfo || updatingSupervisors || joiningLocation || updatingSettings; 
    }

		match /Locations/{locationId} {
			allow read: if isAuthenticated();
      allow update: if updateLocation(locationId);
      allow delete: if isOwner(resource.data.organizationId);    

      function canUpdateCL(){
        let haveRole = request.auth.token.organizationKey.role <= 3;
        let checklistId = request.resource.data.checklists.keys()[0];
        let taskId = request.resource.data.checklists[checklistId].tasks.keys()[0];
        let updatingStatus = request.resource.data.checklists[checklistId].tasks[taskId].diff(resource.data.checklists[checklistId].tasks[taskId]).affectedKeys().hasOnly(["status"]);
        return locMember(locationId) && (haveRole || updatingStatus);
      }

      match /globals/dailyChecklists {
    	  allow read: if locMember(locationId);
        allow write: if canUpdateCL();
      }

      function canUpdateRT(){
        let haveRole = request.auth.token.organizationKey.role <= 3;
        let taskId = request.resource.data.tasks.keys()[0];
        let updatingStatus = request.resource.data.tasks[taskId].diff(resource.data.tasks[taskId]).affectedKeys().hasOnly(["completed"]);
        return locMember(locationId) && (haveRole || updatingStatus);
      }

      match /globals/recurringTasks {
        allow read: if locMember(locationId);
        allow write: if canUpdateRT();
      }

      match /globals/locationChecklists {
        allow read: if locMember(locationId);
        allow write: if canUpdateCL();
      }

      match /utensils/{document=**} {
        allow write, read: if locMember(locationId) && request.auth.token.organizationKey.role <= 3;
      }

      function canWriteBoard(){
        let highRole = request.auth.token.organizationKey.role <= 2;
        return locMember(locationId) && (highRole || request.auth.uid in resource.data.hosts);
      }

      function canWriteBoardContent(collectionName, boardId){
        let highRole = request.auth.token.organizationKey.role <= 2;
        return locMember(locationId) && (highRole || request.auth.uid in get(/databases/$(database)/documents/Locations/$(locationId)/$(collectionName)/$(boardId)).data.hosts);
      }

      match /notes/{boardId} {
        allow read: if locMember(locationId); 
        allow write: if canWriteBoard();

        match /content/{document=**} {
          allow read: if locMember(locationId);
          allow write: if canWriteBoardContent("notes", boardId);
        }
      }

      match /files/{boardId} {
        allow read: if locMember(locationId); 
        allow write: if canWriteBoard();

        match /content/{document=**} {
          allow read: if locMember(locationId);
          allow write: if canWriteBoardContent("files", boardId);
        }
      }

      // Employees
      match /employees/{document=**} {
    	  allow read: if locMember(locationId);
        allow update: if locMember(locationId) && request.auth.token.organizationKey.role < resource.data.role;
        allow delete: if locMember(locationId) && request.auth.token.organizationKey.role <= 1;
      }
		}

    function canManageConversation(locationId){
      return request.auth.token.organizationKey != null && request.auth.token.organizationKey.locId == locationId && request.auth.token.organizationKey.role <= 2;
    }

    function updateConversation(){
      let editing = canManageConversation(resource.data.locationId) && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["id", 'locationId', "privacyLevel", "position"]));
      let muting = request.resource.data.diff(resource.data).affectedKeys().hasOnly(["members"]) && request.resource.data.members.diff(resource.data.members).affectedKeys().hasOnly([request.auth.uid]);
      return editing || muting;
    }

    match /conversations/{conversationId} {
      allow create: if canManageConversation(request.resource.data.locationId) && request.resource.data.keys().hasAll(['name', 'locationId', "privacyLevel"]);
      allow read: if resource.data.members[request.auth.uid] != null || canManageConversation(resource.data.locationId);
      allow write: if updateConversation();   
      allow delete: if canManageConversation(resource.data.locationId);  
    }

    match /directMessages/{dmId} {
      allow create: if request.resource.data.members[request.auth.uid]._id == request.auth.uid;
    	allow read: if resource.data.members[request.auth.uid]._id == request.auth.uid;
      allow update: if resource.data.members[request.auth.uid]._id == request.auth.uid
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["muted","recentMessage"]);
		}

    match /{path=**}/notes/{boardId} {
      allow read: if resource.data.parentId == request.auth.token.organizationKey.orgId || resource.data.parentId == request.auth.token.organizationKey.locId;
    }

    match /{path=**}/files/{boardId} {
      allow read: if resource.data.parentId == request.auth.token.organizationKey.orgId || resource.data.parentId == request.auth.token.organizationKey.locId; 
    }

    match /Organizations/{organizationId} {
      allow read: if isAuthenticated();
      
      // Employees
      match /employees/{document=**} {
    	  allow read: if orgMember(organizationId);
        allow delete: if isOwner(organizationId) 
                      || (orgMember(organizationId)
                      && resource.data.locations.keys().size() == 1
                      && resource.data.role == "employee");
        allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(["locations","locationsList","conversationsAsAdmin","mutedConversations","conversationsAsMember"])
                      || (orgMember(organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["preferredName","emergencyContact","contactComments"]))
                      || (isOwner(organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["supervisingLocations"]));
      }

      match /notes/{document=**} {
        allow read: if orgMember(organizationId);   
        allow write: if isOwner(organizationId);     
      }

      match /files/{document=**} {
        allow read: if orgMember(organizationId);   
        allow write: if isOwner(organizationId); 
      }
    }
  }
}