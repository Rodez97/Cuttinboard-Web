rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(){
      return request.auth != null;
    }

    function isUser(uid){
      return request.auth != null && request.auth.uid == uid;
    }

    function orgMember(orgId){
      return request.auth != null && request.auth.token.organizationKey != null && request.auth.token.organizationKey.orgId == orgId;
    }

    function locMember(orgId, locId){
      return orgMember(orgId) && request.auth.token.organizationKey.locKeys[locId] != null;
    }

    function isOwner(orgId){
      return isAuthenticated() && orgId == request.auth.uid;
    }

    function isOwnerOrSupervisor(orgId){
      return orgMember(orgId) && request.auth.token.organizationKey.role <= 1;
    }

    function isGM(orgId, locId){
      return locMember(orgId, locId) && request.auth.token.organizationKey.locKeys[locId].role <= 2;
    }

    match /Users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      match /subscription/subscriptionDetails {
          allow read: if isUser(userId);
      }
    }

    match /Products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    match /DirectMessages/{dmId} {
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.membersList;
    	allow read: if isAuthenticated() && request.auth.uid in resource.data.membersList;
		}

		match /Locations/{locationId} {
			allow read: if isAuthenticated();
      allow create: if isOwner(resource.data.organizationId) && request.resource.data.keys().hasAll(["organizationId","subItemId","name"]);
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasAny(["organizationId","subItemId","limits","storageUsed","subscriptionStatus"]) == false
                    && isOwnerOrSupervisor(resource.data.organizationId);
      allow delete: if isOwner(resource.data.organizationId);

  		match /{document=**} {
				allow read, write: if true;
			}
		}

    match /Organizations/{organizationId} {
      allow read: if isAuthenticated();
      
      // Employees
      match /employees/{employeeId} {
    	  allow read: if orgMember(organizationId);
        allow delete: if orgMember(organizationId)
                      && resource.data.locations.keys().size() == 1
                      && resource.data.role == "employee";
        allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(["locations"])
                      && isOwnerOrSupervisor(organizationId);
      }

      match /locationChecklist/{checklistId} {
    	  allow read, write: if true;
      }

      // Module Functions
      function readModule(moduleData){
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, moduleData.locationId) 
            || (locMember(organizationId, moduleData.locationId)
            && (accessPublic(moduleData) || accessPositions(moduleData) || accessPrivate(moduleData) || accessHost(moduleData)));
      }

      function updateModule(){
        return (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name","description","accessTags"]) && (isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId)))
            || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["accessTags"]) && request.auth.uid in resource.data.hosts);
      }

      function deleteOrCreateModule(){
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, resource.data.locationId);
      }

      function accessPublic(moduleData){
        return moduleData.privacyLevel == "PUBLIC" && "pl_public" in moduleData.accessTags;
      }

      function accessPositions(moduleData){
        return moduleData.privacyLevel == "POSITIONS" && request.auth.token.organizationKey.locKeys[moduleData.locationId].pos.hasAny(moduleData.accessTags);
      }

      function accessPrivate(moduleData){
        return moduleData.privacyLevel == "PRIVATE" && request.auth.uid in moduleData.accessTags;
      }

      function accessHost(moduleData){
        return  request.auth.uid in moduleData.hosts;
      }

      function moduleContentWrite(moduleData){
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, moduleData.locationId) 
            || (locMember(organizationId, moduleData.locationId) && accessHost(moduleData));
      }
      
      match /conversations/{conversationId} {
          allow read: if readModule(resource.data);
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();      
      }

      match /notes/{boardId} {
          allow read: if readModule(resource.data);
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readModule(get(/databases/$(database)/documents/Organizations/$(organizationId)/notes/$(boardId)).data);
            allow write: if moduleContentWrite(get(/databases/$(database)/documents/Organizations/$(organizationId)/notes/$(boardId)).data);
          }      
      }

      match /todo/{boardId} {
          allow read: if readModule(resource.data);
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readModule(get(/databases/$(database)/documents/Organizations/$(organizationId)/todo/$(boardId)).data);
            allow write: if moduleContentWrite(get(/databases/$(database)/documents/Organizations/$(organizationId)/todo/$(boardId)).data);
          }      
      }

      match /storage/{boardId} {
          allow read: if readModule(resource.data);
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readModule(get(/databases/$(database)/documents/Organizations/$(organizationId)/storage/$(boardId)).data);
            allow write: if moduleContentWrite(get(/databases/$(database)/documents/Organizations/$(organizationId)/storage/$(boardId)).data);
          }      
      }
        
        
        // Tools
        match /utensils/{utensilId} {
          allow read: if true;
          allow write: if true;
        }
    }
  }
}