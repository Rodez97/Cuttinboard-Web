rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated(){
      return request.auth != null;
    }

    function isUser(uid){
      return request.auth != null && request.auth.uid == uid;
    }

    function orgMember(orgId){
      return request.auth != null && ((request.auth.token.organizationKey != null && request.auth.token.organizationKey.orgId == orgId) || request.auth.uid == orgId);
    }

    function locMember(orgId, locId){
      return orgMember(orgId) && request.auth.token.organizationKey.locKeys[locId] != null;
    }

    function isOwner(orgId){
      return isAuthenticated() && orgId == request.auth.uid;
    }

    function isOwnerOrSupervisor(orgId){
      return orgMember(orgId) && request.auth.token.organizationKey.role <= 1;
    }

    function isGM(orgId, locId){
      return locMember(orgId, locId) && request.auth.token.organizationKey.locKeys[locId].role == 2;
    }

    function isManager(orgId, locId){
      return locMember(orgId, locId) && request.auth.token.organizationKey.locKeys[locId].role == 3;
    }

    function compareRoles(orgId){
      let employeeEditingLocation = request.resource.data.locations.keys()[0];
      let employeeRole = resource.data.locations[employeeEditingLocation].role;
      return isOwnerOrSupervisor(orgId) || (orgMember(orgId) && request.auth.token.organizationKey.locKeys[employeeEditingLocation].role < employeeRole);
    }

    match /Users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      match /subscription/subscriptionDetails {
          allow read: if isUser(userId);
      }
    }

    match /Products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    match /DirectMessages/{dmId} {
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.membersList;
    	allow read: if isAuthenticated() && request.auth.uid in resource.data.membersList;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.membersList && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["muted"]);
		}

		match /Locations/{locationId} {
			allow read: if true;// isAuthenticated() && (isOwner(resource.data.organizationId) || request.auth.uid in resource.data.supervisors || request.auth.uid in resource.data.members) ;
      allow create: if isOwner(resource.data.organizationId) && request.resource.data.keys().hasAll(["organizationId","subItemId","name"]);
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasAny(["organizationId","subItemId","limits","storageUsed","subscriptionStatus","supervisors"]) == false
                    && isOwnerOrSupervisor(resource.data.organizationId))
                    || (isOwner(resource.data.organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["supervisors"]));
      allow delete: if isOwner(resource.data.organizationId);      
		}

    match /Organizations/{organizationId} {
      allow read: if isAuthenticated();
      
      // Employees
      match /employees/{employeeId} {
    	  allow read: if orgMember(organizationId);
        allow delete: if orgMember(organizationId)
                      && resource.data.locations.keys().size() == 1
                      && resource.data.role == "employee";
        allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["locations"]) && compareRoles(organizationId))
                      || (orgMember(organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["preferredName","emergencyContact","contactComments"]))
                      || (isOwner(organizationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["supervisingLocations"]));
      }

      match /locationChecklist/{checklistId} {
    	  allow read: if isOwnerOrSupervisor(organizationId) || locMember(organizationId, resource.data.locationId);
        allow create: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId);
        allow update: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId)
                      || (locMember(organizationId, resource.data.locationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["tasks"]));
      }

      match /utensils/{utensilId} {
        allow read: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId);
        allow create, delete: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId);
        allow update: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId)
                      || (isManager(organizationId, resource.data.locationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["changes","currentQuantity"]));
      }

      match /scheduleDocs/{sdId} {
				allow read, write: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId);
			}

      match /shifts/{empShiftsId} {
        allow read: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId) || resource.data.employeeId == request.auth.uid;
        allow create, delete: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId);
        allow update: if isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId) || isManager(organizationId, resource.data.locationId)
                      || resource.data.employeeId == request.auth.uid;
			}

      function accessContentHost(hosts){
        return request.auth.uid in hosts;
      }

      function getTags(locationId, accessTags){
        let baseTags = [request.auth.uid, "hostId_" + request.auth.uid, "pl_public"];
        let userPositions = request.auth.token.organizationKey.locKeys[locationId].pos;
        return accessTags.hasAny(baseTags) || baseTags.hasAny(userPositions);
      }

      function moduleContentWrite(moduleName,boardId){
        let data = get(/databases/$(database)/documents/Organizations/$(organizationId)/$(moduleName)/$(boardId)).data;
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, data.locationId) 
            || (locMember(organizationId, data.locationId) && accessContentHost(data.hosts));
      }

      function readContentModule(moduleName,boardId){
        let data = get(/databases/$(database)/documents/Organizations/$(organizationId)/$(moduleName)/$(boardId)).data;
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, data.locationId) 
            || (locMember(organizationId, data.locationId) && getTags(data.locationId,data.accessTags));
      }

      // Module Functions
      function readModule(){
        return isOwnerOrSupervisor(organizationId) 
            || locMember(organizationId, resource.data.locationId);
      }

      function updateModule(){
        return (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name","description","accessTags","hosts"]) && (isOwnerOrSupervisor(organizationId) || isGM(organizationId, resource.data.locationId)))
            || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["accessTags"]) && request.auth.uid in resource.data.hosts)
            || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["muted"]));
      }

      function deleteOrCreateModule(){
        return isOwnerOrSupervisor(organizationId) 
            || isGM(organizationId, resource.data.locationId);
      }
      
      match /conversations/{conversationId} {
          allow read: if readModule();
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();      
      }

      match /notes/{boardId} {
          allow read: if readModule();
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readContentModule("notes",boardId);
            allow write: if moduleContentWrite("notes",boardId);
          }      
      }

      match /todo/{boardId} {
          allow read: if readModule();
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readContentModule("todo",boardId);
            allow write: if moduleContentWrite("todo",boardId);
          }      
      }

      match /storage/{boardId} {
          allow read: if readModule();
          allow update: if updateModule();
          allow delete, create: if deleteOrCreateModule();

          match /content/{contentId} {
            allow read: if readContentModule("storage",boardId);
            allow write: if moduleContentWrite("storage",boardId);
          }      
      }
    }
  }
}